(= 2 (- 3 1))

(defn ++ [x] (+ x 1))

(defn ->> [x g f] (f (g x)))

(->> 2
    ++
    (fn [x] (= 3 x)))

(defn tail [_ ...rest] rest)

(tail 1 + 3 4)
((tail 1 + 3 4))

(defn ap [f qx] (f (qx)))

(defn pair-diff [a b ...rest]
    (+ 
        (- a b) 
        (if 
            (= '() rest)
            0
            (ap pair-diff rest))))

(pair-diff 10 1 3 5)

(defn apply [f ...args] (ap f args))


(= 'good (apply if 1 'good 'bad))

(unpack unpack '(+ 1) 2 '(3 4))

