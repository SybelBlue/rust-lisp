(import test/lists)

(= 2 (- 3 1))

(defn ++ [x] (+ x 1))

(defn ->> [x f ...rest] 
    (if (nil? rest)
        (f x)
        (ap ->> (cons (f x) rest))))
(->> 2
    ++)
(->> 2
    ++
    (fn [x] (= 3 x)))
(->> 2
    ++
    ++
    ++)

(list (+ 1 2) 4 () (fn [] ()))
(cons (++ 2) '(2 1))

(ap + '(1 2 3 4))
(ap + (range 1 5))

(pairs (range 0 10))


(macro switch [b 'x ...rest]
    (if b 
        (x)
        rest))

(defn err [] (range 0 10000))

(if (= 1 0)
    (err)
    'good)

(switch 
    (= 1 0) (err)
    1 'good)