;; data, instance, class, if, =, ::

(data Bool
    True
    False)

(and (x :: Bool) (y :: Bool)
    (if (= x True) (= y True) False))

(or x y
    (if (= x True) True (= y True))


(data (IMPData x)
    (N Int :: IMPData Int)
    (B Bool :: IMPData Bool))

(false (B False))
;; false :: IMPData Bool
(three (N 3))
;; three :: IMPData Int


(class (Mul a)
    (* :: -> a a a))

(class (Add a)
    (+ :: -> a a a))


(linear a b c
    (+ (* a b) c))
;; linear :: (=> (Mul p0 p1 t0) (Add t0 p2 t1) (-> p0 p1 p2 t1))

(instance (Mul Bool)
    (* and))

(instance (Add Bool)
    (+ or))

(instance (Add (List a))
    (+ concat))


(main (linear False True True))
;; generates linear_bool_bool_bool_bool